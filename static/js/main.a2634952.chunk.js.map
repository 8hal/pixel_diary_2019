{"version":3,"sources":["Day.js","Calendar.js","App.js","index.js"],"names":["Day","props","state","index","dayIndex","dayClasses","classNames","this","dayEmotion","className","onClick","handleSelectedDay","React","Component","Calendar","isLoading","userDays","map","day","emotion","INITIAL_STATE","selectedDay","changingEmotion","days","App","setState","onUpdateSelectedDay","prevState","j","onChangeChangingEmotion","event","target","value","onChangeSelectedDay","parseInt","onAddItem","concat","console","log","type","onChange","ReactDOM","render","document","getElementById"],"mappings":"oPAoBiBA,E,YAdf,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CAACC,MAAM,EAAKF,MAAMG,UAFf,E,sEAKN,IAAD,OACDC,EAAaC,IAAW,MAAOC,KAAKN,MAAMO,YAChD,OAAO,yBAAKC,UAAaJ,EAAYK,QAAS,kBAAI,EAAKT,MAAMU,kBAAkB,EAAKT,MAAMC,SACtF,oCAAUI,KAAKL,MAAMC,MAArB,U,GATQS,IAAMC,WCqBTC,E,YApBb,WAAYb,GAAO,IAAD,8BAChB,4CAAMA,KAGRC,MAAQ,CACNa,WAAY,GALI,E,sEAST,IAAD,OACR,OAAO,6BACL,wCACCR,KAAKN,MAAMe,SAASC,IAAI,SAACC,EAAIf,GAC5B,OAAO,kBAAC,EAAD,CAAKK,WAAYU,EAAIC,QAASR,kBAAmB,EAAKV,MAAMU,kBAAmBP,SAAUD,W,GAd/ES,IAAMC,WCFvBO,EAAgB,CACpBC,YAAa,EACbC,gBAAiB,GACjBC,KAAM,CAAC,CAAEJ,QAAS,aA4ELK,E,YAxEb,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KAIRU,kBAAoB,SAACR,GAAY,EAAKsB,SAAS,CAAEJ,YAAalB,KAL3C,EAOnBuB,oBAAsB,WACpB,EAAKD,SAAS,SAAAE,GAUZ,MAAO,CACLN,YAVsBM,EAAUN,YAWhCC,gBAV0BK,EAAUL,gBAWpCC,KAVWI,EAAUJ,KAAKN,IAAI,SAACC,EAAKU,GACpC,OAAIA,IAAMD,EAAUN,YACX,CAAEF,QAASQ,EAAUL,iBAErBJ,QAfI,EA0BnBW,wBAA0B,SAAAC,GACxB,EAAKL,SAAS,CAAEH,gBAAiBQ,EAAMC,OAAOC,SA3B7B,EA8BnBC,oBAAsB,SAAAH,GACpB,EAAKL,SAAS,CAAEJ,YAAaa,SAASJ,EAAMC,OAAOC,UA/BlC,EAkCnBG,UAAY,WACV,EAAKV,SAAS,SAAAE,GACZ,IAAMJ,EAAOI,EAAUJ,KAAKa,OAAO,CAAEjB,QAAS,YAG9C,MAAO,CACLE,YAHsBM,EAAUN,YAIhCC,gBAH0BK,EAAUL,gBAIpCC,WAxCJ,EAAKrB,MAAQkB,EAFI,E,sEA+CT,IACAG,EAAShB,KAAKL,MAAdqB,KAER,OADAc,QAAQC,IAAIf,GACL,6BACL,4BACEgB,KAAK,SACL7B,QAASH,KAAK4B,WAFhB,aAIA,kBAAC,EAAD,CAAUnB,SAAUO,EAAMZ,kBAAmBJ,KAAKI,oBAClD,6BAEA,iDAAuBJ,KAAKL,MAAMmB,YAAlC,YAAuD,2BACrDkB,KAAK,OACLP,MAAOzB,KAAKL,MAAMoB,gBAClBkB,SAAUjC,KAAKsB,2BAEjB,4BACEU,KAAK,SACL7B,QAASH,KAAKmB,qBAFhB,e,GAhEYd,IAAMC,WCNxB4B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.a2634952.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Day.css\";\nimport classNames from 'classnames'\n\n\nclass Day extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {index:this.props.dayIndex}\n  }\n\n    render() {\n      const dayClasses = classNames('day', this.props.dayEmotion);\n      return <div className = {dayClasses} onClick={()=>this.props.handleSelectedDay(this.state.index)}>\n          <h3> Day {this.state.index} </h3>\n      </div>\n  \n    }\n  }\n  \n  export default Day;","import React from 'react';\nimport Day from './Day';\n\n\n\nclass Calendar extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  state = {\n    isLoading : true\n  }\n  \n\n  render(){\n  return <div >\n    <h1>Calendar</h1>\n    {this.props.userDays.map((day,index) => {\n      return <Day dayEmotion={day.emotion} handleSelectedDay={this.props.handleSelectedDay} dayIndex={index}/>\n    }\n    )\n    }\n  </div>}\n}\n\nexport default Calendar;","import React from 'react';\nimport Calendar from './Calendar';\n\nconst INITIAL_STATE = {\n  selectedDay: 0,\n  changingEmotion: \"\",\n  days: [{ emotion: \"neutral\" }],\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = INITIAL_STATE;\n  }\n\n  handleSelectedDay = (index) => { this.setState({ selectedDay: index }) }\n\n  onUpdateSelectedDay = () => {\n    this.setState(prevState => {\n      const prevSelectedDay = prevState.selectedDay;\n      const prevChangingEmotion = prevState.changingEmotion;\n      const days = prevState.days.map((day, j) => {\n        if (j === prevState.selectedDay) {\n          return { emotion: prevState.changingEmotion };\n        } else {\n          return day;\n        }\n      });\n      return {\n        selectedDay: prevSelectedDay,\n        changingEmotion: prevChangingEmotion,\n        days,\n      };\n    });\n  };\n\n  onChangeChangingEmotion = event => {\n    this.setState({ changingEmotion: event.target.value });\n  };\n\n  onChangeSelectedDay = event => {\n    this.setState({ selectedDay: parseInt(event.target.value) });\n  };\n\n  onAddItem = () => {\n    this.setState(prevState => {\n      const days = prevState.days.concat({ emotion: \"neutral\" });\n      const prevSelectedDay = prevState.selectedDay;\n      const prevChangingEmotion = prevState.changingEmotion;\n      return {\n        selectedDay: prevSelectedDay,\n        changingEmotion: prevChangingEmotion,\n        days,\n      };\n    });\n  };\n\n  render() {\n    const { days } = this.state;\n    console.log(days);\n    return <div>\n      <button\n        type=\"button\"\n        onClick={this.onAddItem}\n      >Add a day</button>\n      <Calendar userDays={days} handleSelectedDay={this.handleSelectedDay} />\n      <br />\n      \n      <label>Input your Day {this.state.selectedDay} Emotion:<input\n        type=\"text\"\n        value={this.state.changingEmotion}\n        onChange={this.onChangeChangingEmotion}\n      /></label>\n      <button\n        type=\"button\"\n        onClick={this.onUpdateSelectedDay}\n      >Update</button>\n    </div>\n\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}