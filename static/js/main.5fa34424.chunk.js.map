{"version":3,"sources":["Day.js","Calendar.js","Daycard.js","App.js","index.js"],"names":["Day","props","state","index","dayIndex","selected","dayClasses","classNames","this","dayEmotion","className","onClick","handleSelectedDay","React","Component","Calendar","isLoading","userDays","map","day","emotion","Daycard","handleChange","color","setState","rgb","r","g","b","a","styles","reactCSS","width","height","borderRadius","background","style","onChange","INITIAL_STATE","selectedDay","changingEmotion","days","App","onUpdateSelectedDay","prevState","j","onChangeChangingEmotion","event","target","value","onChangeSelectedDay","parseInt","onAddItem","concat","console","log","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5fa34424.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Day.css\";\nimport classNames from 'classnames'\n\n\nclass Day extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: this.props.dayIndex,\n      selected: false\n    }\n  }\n\n  render() {\n    const dayClasses = classNames('day', this.props.dayEmotion);\n    return <div className={dayClasses} onClick={() => this.props.handleSelectedDay(this.state.index)}>\n      <h3> Day {this.state.index} </h3>\n    </div>\n\n  }\n}\n\nexport default Day;","import React from 'react';\nimport Day from './Day';\n\n\n\nclass Calendar extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  state = {\n    isLoading : true\n  }\n  \n\n  render(){\n  return <div >\n    <h1>Calendar</h1>\n    {this.props.userDays.map((day,index) => {\n      return <Day dayEmotion={day.emotion} handleSelectedDay={this.props.handleSelectedDay} dayIndex={index}/>\n    }\n    )\n    }\n  </div>}\n}\n\nexport default Calendar;","import React from 'react';\nimport reactCSS from 'reactcss'\nimport { SliderPicker } from 'react-color';\n\n\nclass Daycard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        color: {\n            r: '241',\n            g: '112',\n            b: '19',\n            a: '1',\n          }\n    }\n  }\n\n  handleChange = (color) => {\n    this.setState({ color: color.rgb })\n  };\n  \n  render() {\n    const styles = reactCSS({\n        'default': {\n          color: {\n            width: '100%',\n            height: '200px',\n            borderRadius: '10px',\n            background: `rgba(${ this.state.color.r }, ${ this.state.color.g }, ${ this.state.color.b }, ${ this.state.color.a })`,\n          },\n        },\n      });\n\n    return <div>\n        <div style = {styles.color}></div>\n        <SliderPicker color={ this.state.color } onChange={ this.handleChange }/>\n    </div>\n\n  }\n}\n\nexport default Daycard;","import React from 'react';\nimport Calendar from './Calendar';\nimport Daycard from './Daycard';\nconst INITIAL_STATE = {\n  selectedDay: 0,\n  changingEmotion: \"\",\n  days: [{ emotion: \"neutral\" }],\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = INITIAL_STATE;\n  }\n\n  handleSelectedDay = (index) => { this.setState({ selectedDay: index }) }\n\n  onUpdateSelectedDay = () => {\n    this.setState(prevState => {\n      const prevSelectedDay = prevState.selectedDay;\n      const prevChangingEmotion = prevState.changingEmotion;\n      const days = prevState.days.map((day, j) => {\n        if (j === prevState.selectedDay) {\n          return { emotion: prevState.changingEmotion };\n        } else {\n          return day;\n        }\n      });\n      return {\n        selectedDay: prevSelectedDay,\n        changingEmotion: prevChangingEmotion,\n        days,\n      };\n    });\n  };\n\n  onChangeChangingEmotion = event => {\n    this.setState({ changingEmotion: event.target.value });\n  };\n\n  onChangeSelectedDay = event => {\n    this.setState({ selectedDay: parseInt(event.target.value) });\n  };\n\n  onAddItem = () => {\n    this.setState(prevState => {\n      const days = prevState.days.concat({ emotion: \"neutral\" });\n      const prevSelectedDay = prevState.selectedDay;\n      const prevChangingEmotion = prevState.changingEmotion;\n      return {\n        selectedDay: prevSelectedDay,\n        changingEmotion: prevChangingEmotion,\n        days,\n      };\n    });\n  };\n\n  render() {\n    const { days } = this.state;\n    console.log(days);\n    return <div>\n      <button\n        type=\"button\"\n        onClick={this.onAddItem}\n      >Add a day</button>\n      <Calendar userDays={days} handleSelectedDay={this.handleSelectedDay} />\n      <br />\n      <label>Input your Day {this.state.selectedDay} Emotion:<input\n        type=\"text\"\n        value={this.state.changingEmotion}\n        onChange={this.onChangeChangingEmotion}\n      /></label>\n      <button\n        type=\"button\"\n        onClick={this.onUpdateSelectedDay}\n      >Update</button>\n      <Daycard/>\n    </div>\n\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}